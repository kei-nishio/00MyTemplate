@use 'global' as *;

$ratio: calc(320 / 375); // 320px以下レスポンシブの比率
$type: 'type1';
/*
root font-sizeの設定
[type1]
・0~$width-pcまで線形
・$width-pc~16px
[type2]
・0~$width-pc~全て線形
[type3]
・768pxで$ratioまで縮小
・768px~$width-pcまで線形
・$width-pc~16px
*/

@if $startFrom == sp {
  // スマホファースト
  html {
    // 375px~767px
    font-size: 16px;

    //~375px
    @media (max-width: 375px) {
      font-size: vw(16, 375);
    }

    @if ($type == 'type1') {
      /*
      [type1] 通常タイプ（768付近で文字サイズが小さくなる）
      ・0~$width-pcまで線形
      ・$width-pc~16pxで一定
      */
      // 768px~width-pc
      @include mq('md') {
        font-size: vw(16, $width-pc);
      }
      // width-pc~
      @media (min-width: $width-pc) {
        font-size: 16px;
      }
    } @else if ($type == 'type2') {
      /*
      [type2] デザインのまま拡縮するタイプ
      ・0~$width-pc~全て線形
      */
      // 768px~
      @include mq('md') {
        font-size: vw(16, $width-pc);
      }
    } @else if ($type == 'type3') {
      /*
      [type3] 通常版の768付近で文字サイズが小さくなるのを緩和したタイプ
      ・768pxで$ratioまで縮小
      ・768px~$width-pcまで線形
      ・$width-pc~16px
      */
      // 768px~width-pc
      @include mq('md') {
        font-size: vwLinear(calc(16 * $ratio), 768, 16, strip-unit($width-pc));
      }
      // width-pc~
      @media (min-width: $width-pc) {
        font-size: 16px;
      }
    } @else if ($type == 'type4') {
      /*
      [type4] 画面幅がinnerになってから余白が広がるタイプ
      ・0~$innerまで線形
      ・$inner~16pxで一定
      */
      // 768px~inner
      @include mq('md') {
        font-size: vw(16, $inner);
      }
      // inner~
      @media (min-width: $inner) {
        font-size: 16px;
      }
    } @else {
      // 16pxのまま
    }
  }
} @else {
  // PCファースト
  html {
    // 375px~767px
    font-size: 16px;

    // 768px~inner
    @media (max-width: $inner) {
      font-size: vwLinear(calc(16 * $ratio), 768, 16, strip-unit($inner));
    }

    // inner~
    @include mq('md') {
      font-size: 16px;
    }

    // ~375px
    @media (max-width: 375px) {
      font-size: vw(16, 375);
    }
  }
}
