@use 'setting' as *;
@use 'sass:math';

// * 数値のみを取り出す
// * 参照：https://css-tricks.com/snippets/sass/strip-unit-function/
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return math.div($number, $number * 0 + 1);
  }
  @return $number;
}

// * vwへの計算式
@function vw($size, $base) {
  @return math.div(strip-unit($size), strip-unit($base)) * 100vw;
}

// * vhへの計算式
@function vh($size, $base) {
  @return math.div(strip-unit($size), strip-unit($base)) * 100vh;
}

// * lvhへの計算式
@function lvh($size, $base) {
  @return math.div(strip-unit($size), strip-unit($base)) * 100lvh;
}

// * svhへの計算式
@function svh($size, $base) {
  @return math.div(strip-unit($size), strip-unit($base)) * 100svh;
}

// * dvhへの計算式
@function dvh($size, $base) {
  @return math.div(strip-unit($size), strip-unit($base)) * 100dvh;
}

// * remへの計算式（16pxを基準としている。10pxを基準とする場合は16を10に変更する）
@function rem($size) {
  @return math.div(strip-unit($size), 16) * 1rem;
}

// * emへの計算式
@function em($size, $base) {
  @return math.div(strip-unit($size), strip-unit($base)) * 1em;
}

// * パーセントへの計算式
@function percent($size, $base) {
  @return math.div(strip-unit($size), strip-unit($base)) * 100%;
}

// * vwLinearの計算式
@function vwLinear($y1, $x1, $y2, $x2) {
  $sx1: strip-unit($x1);
  $sy1: strip-unit($y1);
  $sx2: strip-unit($x2);
  $sy2: strip-unit($y2);

  @if $sx1 == $sx2 {
    @error "The x values cannot be equal, as this would cause division by zero.";
  }

  $a: math.div(($sy2 - $sy1), ($sx2 - $sx1));
  $b: $sy1 - $a * $sx1;

  $a-vw: $a * 100;
  $b-px: $b * 1px;

  @if $a-vw == 0 {
    @return calc(#{$b-px});
  }
  @return calc(#{$a-vw}vw + #{$b-px});
}

// * fluidRange
@function fluidRange($size1, $size2: null, $ratio: null) {
  $ssize1: strip-unit($size1);
  $ssize2: if($size2 == null, $ssize1, strip-unit($size2));
  $sratio: if($ratio == null, calc(320 / 375), strip-unit($ratio));
  $min: min($ssize1, $ssize2);
  $max: max($ssize1, $ssize2);
  @if $ssize1 == $ssize2 {
    @return rem($ssize1);
  } @else {
    @return clamp(calc($min * $sratio * 1px), vwLinear($ssize1, $width-sp, $ssize2, $inner), calc($max * 1px));
  }
}

// * fluidRangeLinear // 320px以下で線形に出来るがややこしいので使わない。
@function fluidRangeLinear($size1, $size2: null) {
  $ssize1: strip-unit($size1);
  $ssize2: if($size2 == null, $ssize1, strip-unit($size2)); // $size2 が null の場合、$min を使用
  $min: min($ssize1, $ssize2);
  $max: max($ssize1, $ssize2);
  @if $ssize1 == $ssize2 {
    @return rem($ssize1);
  } @else {
    @return min(min(calc($ssize1 / 375 * 100vw), vwLinear($ssize1, $width-sp, $ssize2, $inner)), calc($ssize2 * 1px));
  }
}

// * 重なり順（z-index）
@function zi($key) {
  @return map-get($z-index-layer, $key);
}
$z-index-layer: (
  loading: 9000,
  modal: 7000,
  header: 5000,
  drawer: 3000,
  floating: 1000,
  default: 1,
);

// * 相対単位のメモ
// * 美しいレスポンシブデザインのためのUTOPIA：https://utopia.fyi/
// * 参照：https://www.w3.org/TR/css-values-4/#relative-lengths
// * 参照：https://coliss.com/articles/build-websites/operation/css/relative-length-units-based-on-font.html
// * 参照：https://coliss.com/articles/build-websites/operation/css/relative-length-units-based-on-the-viewport.html
// cap = ラテン語の大文字の高さ。font-familyに因らない。
// ch = "0"（ゼロ）の幅
// em = 親要素のフォントサイズ
// ex = 小文字のxの高さ
// ic = 全角文字1文字の幅（CJK用）
// lh = 親要素の行の高さ
// rem = ルート要素（html）のフォントサイズ
// rlh = ルート要素（html）の行の高さ
// vw = ウィンドウの幅
// vh = ウィンドウの高さ
// lvh = ウィンドウの縦方向の長さ
// svh = ウィンドウの短い方向の長さ
// dvh = ウィンドウの縦方向の長さ（デバイスの向きによる）
// vmin = ウィンドウの幅または高さの小さい方
// vmax = ウィンドウの幅または高さの大きい方
// % = 親要素の値
