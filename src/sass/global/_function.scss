@use 'setting' as *;
@use 'sass:math';
@use 'sass:map';
@use 'sass:meta'; // metaモジュールをインポート

// * 数値のみを取り出す
@function strip-unit($number) {
  @if meta.type-of($number) == 'number' and not math.is-unitless($number) {
    @return math.div($number, $number * 0 + 1);
  }
  @return $number;
}

// * vwへの計算式
@function vw($size, $base) {
  @return math.div(strip-unit($size), strip-unit($base)) * 100vw;
}

// * vhへの計算式
@function vh($size, $base) {
  @return math.div(strip-unit($size), strip-unit($base)) * 100vh;
}

// * lvhへの計算式
@function lvh($size, $base) {
  @return math.div(strip-unit($size), strip-unit($base)) * 100lvh;
}

// * svhへの計算式
@function svh($size, $base) {
  @return math.div(strip-unit($size), strip-unit($base)) * 100svh;
}

// * dvhへの計算式
@function dvh($size, $base) {
  @return math.div(strip-unit($size), strip-unit($base)) * 100dvh;
}

// * remへの計算式（16pxを基準としている。10pxを基準とする場合は16を10に変更する）
@function rem($size, $base: 16px) {
  @return math.div(strip-unit($size), strip-unit($base)) * 1rem;
}

// * emへの計算式
@function em($size, $base: 16px) {
  @return math.div(strip-unit($size), strip-unit($base)) * 1em;
}

// * パーセントへの計算式
@function percent($size, $base) {
  @return math.div(strip-unit($size), strip-unit($base)) * 100%;
}

// * vwLinearの計算式
@function vwLinear($y1, $x1, $y2, $x2) {
  $sx1: strip-unit($x1);
  $sy1: strip-unit($y1);
  $sx2: strip-unit($x2);
  $sy2: strip-unit($y2);

  @if $sx1 == $sx2 {
    @error "The x values cannot be equal, as this would cause division by zero.";
  }

  $a: math.div(($sy2 - $sy1), ($sx2 - $sx1));
  $b: $sy1 - $a * $sx1;

  $a-vw: $a * 100;
  $b-px: $b * 1px;

  @if $a-vw == 0 {
    @return calc(#{$b-px});
  }
  @if $b-px == 0px {
    @return calc(#{$a-vw}vw);
  }
  @return calc(#{$a-vw}vw + #{$b-px});
}

// * fluidRange
@function fluidRange($size1, $size2: null, $ratio: null) {
  $ssize1: strip-unit($size1);
  $ssize2: if($size2 == null, $ssize1, strip-unit($size2));
  $sratio: if($ratio == null, math.div(320, 375), strip-unit($ratio));
  $min: math.min($ssize1, $ssize2);
  $max: math.max($ssize1, $ssize2);
  @if $ssize1 > $ssize2 {
    $sratio: 1;
  }
  @if $ssize1 == $ssize2 {
    @return rem($ssize1);
  } @else {
    @return clamp(calc(#{$min * $sratio} * 1px), vwLinear($ssize1, $width-sp, $ssize2, $width-pc), calc(#{$max} * 1px));
  }
}

// * fluidRangeInner
@function fluidRangeInner($size1, $size2: null, $ratio: null) {
  $ssize1: strip-unit($size1);
  $ssize2: if($size2 == null, $ssize1, strip-unit($size2));
  $sratio: if($ratio == null, math.div(320, 375), strip-unit($ratio));
  $min: math.min($ssize1, $ssize2);
  $max: math.max($ssize1, $ssize2);
  @if $ssize1 > $ssize2 {
    $sratio: 1;
  }
  @if $ssize1 == $ssize2 {
    @return rem($ssize1);
  } @else {
    @return clamp(calc(#{$min * $sratio} * 1px), vwLinear($ssize1, $width-sp, $ssize2, $width-pc), calc(#{$max} * 1px));
  }
}

// * fluidRangeLinear
@function fluidRangeLinear($size1, $size2: null) {
  $ssize1: strip-unit($size1);
  $ssize2: if($size2 == null, $ssize1, strip-unit($size2));
  $min: math.min($ssize1, $ssize2);
  $max: math.max($ssize1, $ssize2);
  @if $ssize1 == $ssize2 {
    @return rem($ssize1);
  } @else {
    @return min(
      min(calc(math.div($ssize1, 375) * 100vw), vwLinear($ssize1, $width-sp, $ssize2, $width-pc)),
      calc(#{$ssize2} * 1px)
    );
  }
}
